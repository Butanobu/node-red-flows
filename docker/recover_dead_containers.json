[{"id":"bbf212be.a2be1","type":"comment","name":"Read Docker event stream","info":"","x":129.5,"y":132,"z":"999ad9d5.b2651","wires":[]},{"id":"d3e13708.f06f48","type":"function","name":"","func":"// msg.payload should be either 'start' or 'stop'\n// The request is made to Docker, but because it's a stream it never ends,\n// so the 'stop' code tears down the connection from the client side.\n\nswitch (msg.payload) {\n    case 'start':\n        if (typeof context.req !== 'undefined'){\n            node.warn(\"Event stream already exists, not starting.\");\n        }\n        else {\n            node.warn(\"Connecting to Docker event stream.\");\n            var options = {\n                host: \"172.17.42.1\",\n                port: \"2375\",\n                path: \"/events\",\n                method: \"GET\",\n                headers: {\n                    Accept: \"*/*\"\n                }\n            };\n            \n            context.req = context.global.http.request(options, function(response) {\n//every time an event comes from Docker we get a 'data' event in the form of a buffer, which .toString() converts to a JSON object nicely.\n                response.on(\"data\", function(data) {\n                    node.send({payload: data.toString()});\n                });\n                response.on(\"end\", function(data) {\n                    node.warn(\"HTTP stream closed correctly\");\n                });\n            });\n            context.req.on(\"error\", function(error){\n                node.warn(\"Something broke: \" + error);\n            });\n            context.req.end();\n        }\n        break;\n    case 'stop':\n// Check to see if the request exists, abort it and delete it\n        if (typeof context.req !== 'undefined'){\n            context.req.abort();\n            delete context.req;\n            node.warn(\"Manually closed http stream\");\n        }\n        else {\n            node.warn(\"Tried to stop undefined http stream\");\n        }\n        break;\n    default:\n        node.warn(\"Something else happened other than a start or stop\");\n}","outputs":1,"valid":true,"x":464,"y":151,"z":"999ad9d5.b2651","wires":[["2a4860e.7adf32"]]},{"id":"b8ffb787.47358","type":"debug","name":"","active":false,"console":"false","complete":"payload","x":770,"y":153,"z":"999ad9d5.b2651","wires":[]},{"id":"ab2c3cc4.af5bb8","type":"inject","name":"","topic":"","payload":"start","payloadType":"string","repeat":"","crontab":"","once":false,"x":329,"y":132,"z":"999ad9d5.b2651","wires":[["d3e13708.f06f48"]]},{"id":"35d2093f.c199a6","type":"inject","name":"","topic":"","payload":"stop","payloadType":"string","repeat":"","crontab":"","once":false,"x":329,"y":168,"z":"999ad9d5.b2651","wires":[["d3e13708.f06f48"]]},{"id":"be881a36.33ae58","type":"comment","name":"Docker maintainer","info":"Start the event stream first.\n\nThen\n\nPOST {\"image\": \"imagename\", \"autorestart\": true} to /docker/maintainer to add an image to the watchlist\n\nor\n\nPOST {\"image\": \"imagename\", \"autorestart\": false} to /docker/maintainer to remove an image from the watchlist\n\nIf an event arrives that includes {\"status\": \"die\", \"from\": \"imagename\"} the flow removes the dead container,\nthen creates and starts a new one to replace it.","x":87.5,"y":233.77777099609375,"z":"999ad9d5.b2651","wires":[]},{"id":"3e95e109.bb42c6","type":"http in","name":"","url":"/docker/maintainer","method":"post","x":307.44444444444446,"y":233.44444444444446,"z":"999ad9d5.b2651","wires":[["379329a6.12233e","7ac4f6fe.79fe48"]]},{"id":"d4066cc8.562f88","type":"http response","name":"","x":761.4444580078125,"y":233.33331298828125,"z":"999ad9d5.b2651","wires":[]},{"id":"379329a6.12233e","type":"change","name":"Set \"Received OK\" response","rules":[{"t":"set","p":"payload","to":"{\"result\": \"Received OK\"}"}],"action":"","property":"","from":"","to":"","reg":false,"x":558.3333740234375,"y":233.4444580078125,"z":"999ad9d5.b2651","wires":[["d4066cc8.562f88"]]},{"id":"7ac4f6fe.79fe48","type":"function","name":"Maintain image watchlist; recover \"die\" events","func":"//The two outputs are [action, status]\n\n//We can restart several containers, so we need a watchlist\ncontext.watchlist = context.watchlist || [];\n\nswitch (msg.payload.autorestart) {\n    case undefined:\n        //This is probably an event\n        //If a container died and is in our watchlist, destroy it, create a new one and start it.\n        if (msg.payload.status == \"die\" && (context.watchlist.indexOf(msg.payload.from) != -1)) {\n            newmsg = {};\n            //This will be passed to the \"remove container\" API\n            newmsg.removethis = msg.payload.id;\n            //This will be used later for the \"create container\" API\n            newmsg.createpayload = {Image: msg.payload.from};\n            node.send([newmsg,{payload: {image: msg.payload.image, action: \"recovered\"}}])\n        }\n        break;\n    case true:\n        //True is telling us to start watching\n        //If the image is not in our watchlist, add it and send an event to say we've started watching\n        if (context.watchlist.indexOf(msg.payload.image) == -1) {\n            context.watchlist.push(msg.payload.image);\n            node.send([null,{payload: {image: msg.payload.image, action: \"started\"}}]);\n        }\n        break;\n    case false:\n        //False is telling us to stop watching\n        //If the image is in our watchlist, remove it\n        if (context.watchlist.indexOf(msg.payload.image) != -1) {\n            context.watchlist.splice(context.watchlist.indexOf(msg.payload.image),1);\n            node.send([null,{payload: {image: msg.payload.image, action: \"stopped\"}}]);\n        }\n        break;\n}","outputs":"2","valid":true,"x":610.6666564941406,"y":270.6666259765625,"z":"999ad9d5.b2651","wires":[["15969eb0.192e21"],["6819574a.1fd98"]]},{"id":"363a9b5c.cad864","type":"inject","name":"start","topic":"","payload":"{\"image\": \"kvmhost:5000/software/apache:latest\", \"autorestart\": true}","payloadType":"string","repeat":"","crontab":"","once":false,"x":152.33331298828125,"y":295.33349609375,"z":"999ad9d5.b2651","wires":[["d28ec6bd.3e6d"]]},{"id":"d28ec6bd.3e6d","type":"json","name":"","x":303.33331298828125,"y":295.55572509765625,"z":"999ad9d5.b2651","wires":[["7ac4f6fe.79fe48"]]},{"id":"448a534d.1b40ac","type":"inject","name":"","topic":"","payload":"{\"status\": \"die\", \"from\": \"kvmhost:5000/software/apache:latest\"}","payloadType":"string","repeat":"","crontab":"","once":false,"x":143.88888549804688,"y":387.888916015625,"z":"999ad9d5.b2651","wires":[["d28ec6bd.3e6d"]]},{"id":"15969eb0.192e21","type":"http request","name":"Remove dead container","method":"DELETE","ret":"txt","url":"http://kvmhost:2375/containers/{{removethis}}","x":704.3333435058594,"y":307.33343505859375,"z":"999ad9d5.b2651","wires":[["31e44e86.26d362"]]},{"id":"70a2705.400aa9","type":"http request","name":"Create a container","method":"POST","ret":"obj","url":"http://kvmhost:2375/containers/create","x":726.77783203125,"y":381.3333740234375,"z":"999ad9d5.b2651","wires":[["fc8d8f98.f64af"]]},{"id":"fc8d8f98.f64af","type":"function","name":"Grab details of created container and set up for start","func":"var newmsg = {id: msg.payload.Id, headers: {}, payload: {}};\nnewmsg.headers[\"Content-Type\"] = \"application/json\";\nreturn newmsg;","outputs":1,"valid":true,"x":628,"y":418.11114501953125,"z":"999ad9d5.b2651","wires":[["60c3df2d.9079d8"]]},{"id":"60c3df2d.9079d8","type":"http request","name":"Start a container","method":"POST","ret":"txt","url":"http://kvmhost:2375/containers/{{id}}/start","x":748.888916015625,"y":453.6666259765625,"z":"999ad9d5.b2651","wires":[["fc985995.8abd5"]]},{"id":"31e44e86.26d362","type":"change","name":"","rules":[{"t":"set","p":"payload","to":"msg.createpayload"}],"action":"","property":"","from":"","to":"","reg":false,"x":723,"y":343.3333740234375,"z":"999ad9d5.b2651","wires":[["70a2705.400aa9"]]},{"id":"2a4860e.7adf32","type":"json","name":"","x":613,"y":147,"z":"999ad9d5.b2651","wires":[["b8ffb787.47358","7ac4f6fe.79fe48"]]},{"id":"f9f02f12.d04ce","type":"inject","name":"stop","topic":"","payload":"{\"image\": \"kvmhost:5000/software/apache:latest\", \"autorestart\": false}","payloadType":"string","repeat":"","crontab":"","once":false,"x":139,"y":339,"z":"999ad9d5.b2651","wires":[["d28ec6bd.3e6d"]]},{"id":"fc985995.8abd5","type":"debug","name":"","active":true,"console":"false","complete":"true","x":920,"y":454,"z":"999ad9d5.b2651","wires":[]},{"id":"6819574a.1fd98","type":"debug","name":"Action log","active":true,"console":"false","complete":"payload","x":900,"y":277,"z":"999ad9d5.b2651","wires":[]}]
