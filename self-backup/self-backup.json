[{"id":"397eb05a.ec0658","type":"comment","name":"Self-backup","info":"","x":67.5,"y":61.42857360839844,"z":"c0be1bea.341748","wires":[]},{"id":"131be36f.e06afd","type":"file in","name":"Read flow file","filename":"/home/bri/node-red/flows_E0206843.json","format":"utf8","x":372.8571472167969,"y":63.71427917480469,"z":"c0be1bea.341748","wires":[["8bd1e14b.61e9a"]]},{"id":"3801d608.fcbcea","type":"inject","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":225.85714721679688,"y":62.71427917480469,"z":"c0be1bea.341748","wires":[["131be36f.e06afd"]]},{"id":"7ceabfe5.8db8e","type":"function","name":"Process to separate arrays","func":"var newpl = {};\nvar wsl = {};\nvar wsl_ids = {};\nvar newmsg = [];\nvar tabs = {};\n\n// The file contains an array of JSON objects; cycle through and process them all\nmsg.payload.forEach(function(element) {\n\t// property Z is the 3D position indicating a regular node placed in a tab\n\tif (element.hasOwnProperty(\"z\")) {\n\t\t// websocket in and out both refer to the websocket listener, but we only need one of them... look further down\n\t\tif (element.type === \"websocket in\") { wsl_ids[element.z] = element.server; }\n\t\tnewpl[element.z] = newpl[element.z] || [];\n\t\tnewpl[element.z].push(element);\n\t}\n\t// If it's a tab entry we need it's ID and label; the label corresponds to Z\n\telse if (element.type === \"tab\") { tabs[element.id] = element.label; }\n\t// Websocket listeners are not nodes and not listed with reference to any tab they do have a unique ID, though.\n\telse if (element.type === \"websocket-listener\") {\n\t\twsl[element.id] = wsl[element.id] || {};\n\t\twsl[element.id] = element;\n\t}\n});\n\n// Have a troll through the list of websocket listeners and push them into the right array in an object property based on Z/label\nfor (var key in wsl_ids) {\n\tnewpl[key] = newpl[key] || [];\n\tnewpl[key].push(wsl[wsl_ids[key]]);\n};\n\n// Inside the newmsg array, pull together the individual arrays into objects along with a filename based on their Z/label\n// The payload goes into the file. Unfortunately, the FOLDER MUST EXIST!\nfor (var key in newpl) {\n\tvar tmpfn = \"/home/bri/nodebackup/\" + tabs[key] + \".json\";\n\tvar content = newpl[key];\n\tnewmsg.push({ filename: tmpfn, payload: content });\n};\n\n// Sequentially return the array \nreturn [newmsg];","outputs":1,"valid":true,"x":779.8571472167969,"y":62.71427917480469,"z":"c0be1bea.341748","wires":[["fca05a4e.6f1b4"]]},{"id":"8bd1e14b.61e9a","type":"json","name":"Convert to object","x":556.8571472167969,"y":62.71427917480469,"z":"c0be1bea.341748","wires":[["7ceabfe5.8db8e"]]},{"id":"fca05a4e.6f1b4","type":"file","name":"Write to individual files","filename":"","appendNewline":true,"overwriteFile":true,"x":1017.8571472167969,"y":61.71427917480469,"z":"c0be1bea.341748","wires":[]}]
